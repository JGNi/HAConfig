#Idea: https://github.com/paperdink/timcal/blob/main/timcal/GUI.cpp

substitutions:
  node_name: infopanel
  device_verbose_name: "Infopanel"
  board: nodemcuv2
  platform: ESP8266
  log_level: DEBUG

packages:
  wifi: !include common/wifi.yaml
  device_base: !include common/device_base.yaml
  logger: !include common/logger.yaml
  
esphome:
  on_boot:
    - priority: -100
      then:
        - logger.log: "Awaiting time sync"
        - wait_until:
            condition:
              time.has_time:
            timeout: 30s
        - logger.log: "Time in sync"
        - delay: 3s
        - display.page.show: calendar
        - component.update: screen
    - priority: 200
      then:
        - logger.log: "Booting"
        - display.page.show: boot
        - component.update: screen

ota:

spi:
  clk_pin: D5
  mosi_pin: D7

interval:
  - interval: 30min
    then:
      - logger.log: "Refreshing events"
      - homeassistant.service:
          service: pyscript.infopanel_get_calendar_event
          data:
            count: '3'
          
api:
  id: ha_api
  services:
    - service: update_events
      variables:
        event_id: int
        text: string
      then:
        - if:
            condition:
              lambda: 'return event_id == 1;'
            then:
              - logger.log: "Received event 1"
              - lambda: |-
                  strcpy(id(event1), text.c_str());
        - if:
            condition:
              lambda: 'return event_id == 2;'
            then:
              - logger.log: "Received event 2"
              - lambda: |-
                  strcpy(id(event2), text.c_str());
        - if:
            condition:
              lambda: 'return event_id == 3;'
            then:
              - logger.log: "Received event 3"
              - lambda: |-
                  strcpy(id(event3), text.c_str());
              - component.update: screen   

globals:
  - id: event1
    type: char[50]
    restore_value: no
  - id: event2
    type: char[50]
    restore_value: no
  - id: event3
    type: char[50]
    restore_value: no

display:
  - platform: waveshare_epaper
    id: screen
    cs_pin: 15
    dc_pin: 4
    busy_pin: 16
    reset_pin: 5
    model: 4.20in
    reset_duration: 2ms
    update_interval: never
    pages:
      - id: boot
        lambda: |-
          it.print(110, 70, id(icon_states), "\U000F16C4");
      - id: calendar
        lambda: |-
          /* Defines */
          static const char* TAG = "infopanel"; /* TAG for logger component */
          
          int x_header_start = 115;
          int x_start_offset = 40;
          
          int y_header_start = 20;
          int y_start_offset = 20;
          
          int x_offset = x_start_offset;
          int x_offset_next = x_header_start;
          
          int y_offset = y_start_offset;
          
          int i, firstDayOffset, weekDay;
          
          int x_start[8], y_start[8];
          int width[8], height[8];

          int firstDay = (int)id(firstday).state;
          int lastDate = (int)id(lastdate).state;

          /* Map days */
          std::map<std::string, std::string> dayMap {
              {"1", "Man"},
              {"2", "Tir"},
              {"3", "Ons"},
              {"4", "Tor"},
              {"5", "Fre"},
              {"6", "Lør"},
              {"7", "Søn"}
          };

          /* Display template */
          auto time = id(time_now).now();
          it.filled_rectangle(0, 210, 400, 100);
          it.strftime(10, 5, id(font_datetime), "%H", time);
          it.strftime(10, 55, id(font_datetime), "%M", time);
          it.strftime(10, 215, id(font_datetime), id(white),"%d", time);
          it.strftime(3, 265, id(font_month), id(white), "%b", time);
          it.filled_rectangle(93, 0, 5, 210);
          it.filled_rectangle(93, 210, 5, 100, id(white));


          /* Display weeknumber on 2 lines */
          it.print(17, 130, id(font_week), "Uge");
          it.strftime(29, 160, id(font_week), "%W", time);
          
          /* Display today text */
          it.print(105, 215, id(font_date), id(white), "Kommende aftaler:");

          /* Display upcoming calendar events */
          it.print(105, 235, id(font_date), id(white), id(event1));
          it.print(105, 255, id(font_date), id(white), id(event2));
          it.print(105, 275, id(font_date), id(white), id(event3));
          
          /* Print days as headers */
          for(i = 1; i <= 7; i++) {
            it.print(x_offset_next, y_header_start, id(font_small_arial), dayMap[i].c_str());
            it.get_text_bounds(x_offset_next, y_header_start, dayMap[i].c_str(), id(font_small_arial), TextAlign::TOP_LEFT, &x_start[i], &y_start[i], &width[i], &height[i]);

            x_offset_next += x_offset;
          }

          y_offset = y_header_start + height[1] + 2;
          it.line((x_header_start - (x_offset / 2)), y_offset, (x_start[7] + width[7] + (x_offset / 2)), y_offset);

          /* Find offset for the first day of the month */
          firstDayOffset = 0;
          for(i = 2; i <= firstDay; i++) {
            firstDayOffset += x_offset;
          }
          
          weekDay = firstDay;
          x_offset_next = x_header_start + firstDayOffset;
          
          y_offset = y_header_start + height[1] + y_start_offset;
          
          int X, tmpX, tmpY, dWidth, dHeight;
          
          for(i = 1; i <= lastDate; i++) {
            it.get_text_bounds(x_offset_next, y_header_start, std::to_string(i).c_str(), id(font_date), TextAlign::TOP_LEFT, &tmpX, &tmpY, &dWidth, &dHeight);

            X = x_offset_next + ((width[weekDay]/2) - (dWidth/2));
            
            /*ESP_LOGD("main", "Adding %i (weekDay %i) at X: %i - Y: %i", i, weekDay, X, y_offset);*/
            if (i == (int)id(todayDate).state) {
              it.filled_rectangle(x_offset_next-5, y_offset-10, width[weekDay]+10, y_start_offset+10);
              it.print(X, y_offset, id(font_date), id(grey), std::to_string(i).c_str());
            } else {
              it.print(X, y_offset, id(font_date), std::to_string(i).c_str());
            }
            if (weekDay == 7) {
              y_offset += y_start_offset+10;
              x_offset_next = x_header_start;
              weekDay = 1;
            } else {
              x_offset_next += x_offset;
              weekDay++;
            }
          }

color:
  - id: white
    white: 0%
  - id: grey
    white: 50%
  - id: black
    white: 100%

time:
  - platform: sntp
    id: time_now
    on_time:
      # Every 1 minutes
      - seconds: 0
        then:
          - component.update: screen   
debug:
  update_interval: 5s
  
sensor:
  - platform: homeassistant
    id: firstday
    entity_id: sensor.first_day_of_month
    accuracy_decimals: 0
  - platform: homeassistant
    id: lastdate
    entity_id: sensor.days_in_month
    accuracy_decimals: 0
  - platform: homeassistant
    id: todayDate
    entity_id: sensor.date_today
    accuracy_decimals: 0

  - platform: debug
    free:
      name: "Heap Free"
    fragmentation:
      name: "Heap Fragmentation"
    block:
      name: "Heap Max Block"
    loop_time:
      name: "Loop Time"
      
text_sensor:
  - platform: debug
    device:
      name: "Device Info"
    
font:
  - file: "fonts/Arial-Black-Bold.ttf"
    id: font_datetime
    size: 50
    glyphs: "0123456789"
  - file: "fonts/Arial-Black-Bold.ttf"
    id: font_month
    size: 40
  - file: "fonts/Arial-Black-Bold.ttf"
    id: font_week
    size: 25
    glyphs: "Uge0123456789"
  - file: "fonts/Arial-Bold.ttf"
    id: font_date
    size: 15
    glyphs: "()/+,.-&:0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÆØÅÖ abcdefghijklmnopqrstuvwxyzæøåö"
  - file: "fonts/Arial.ttf"
    id: font_small_arial
    size: 15
    glyphs: "()/+,-&:0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÆØÅÖ abcdefghijklmnopqrstuvwxyzæøåö"
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icon_states
    size: 150
    glyphs:
      - "\U000F16C4" # Boot
      - "\U000F1792" # Update