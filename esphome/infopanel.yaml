#Idea: https://github.com/paperdink/timcal/blob/main/timcal/GUI.cpp

substitutions:
  node_name: infopanel
  device_verbose_name: "Infopanel"
  board: nodemcuv2
  platform: ESP8266
  log_level: DEBUG

packages:
  wifi: !include common/wifi.yaml
  device_base: !include common/device_base.yaml
  logger: !include common/logger.yaml

esphome:
  includes:
    # Load in std libs (map, vector)
    - custom_libs/infopanel.h
  platformio_options:
    build_flags: -DMMU_IRAM_SIZE=0x8000 -DMMU_ICACHE_SIZE=0x8000
    
  on_boot:
    - priority: -100
      then:
        - delay: 10s
        - display.page.show: weather
        - component.update: screen
    - priority: 200
      then:
        - logger.log: "Booting"
        - display.page.show: boot
        - component.update: screen

logger:
  baud_rate: 0
        
ota:

api:
  id: ha_api

interval:
  - interval: 1min
    then:
      - component.update: screen

spi:
  clk_pin: D5
  mosi_pin: D7

display:
  - platform: waveshare_epaper
    id: screen
    cs_pin: 15
    dc_pin: 4
    busy_pin: 16
    reset_pin: 5
    model: 4.20in
    reset_duration: 2ms
    update_interval: never
    pages:
      - id: boot
        lambda: |-
          it.print(110, 70, id(icon_states), "\U000F16C4");
      - id: calendar
        lambda: |-
          /* Defines */
          int x_header_start = 115;
          int x_start_offset = 40;
          
          int y_header_start = 20;
          int y_start_offset = 20;
          
          int x_offset = x_start_offset;
          int x_offset_next = x_header_start;
          
          int y_offset = y_start_offset;
          
          int i, firstDayOffset, weekDay;
          
          int x_start[8], y_start[8];
          int width[8], height[8];

          /* Display template */
          std::string month_data = id(month_info).state;
          it.filled_rectangle(0, 210, 400, 100);
          it.print(10, 5, id(font_datetime), ExtractDateTime(month_data, 6).c_str());               // Hour
          it.print(10, 55, id(font_datetime), ExtractDateTime(month_data, 7).c_str());              // Minute
          it.print(10, 215, id(font_datetime), id(white), ExtractDateTime(month_data, 2).c_str());  // Date
          it.print(3, 265, id(font_month), id(white), ExtractDateTime(month_data, 1).c_str());      // Month
          it.filled_rectangle(93, 0, 5, 210);
          it.filled_rectangle(93, 210, 5, 100, id(white));

          /* Display weeknumber on 2 lines */
          it.print(17, 130, id(font_week), "Uge");
          it.print(29, 160, id(font_week), ExtractDateTime(month_data, 8).c_str());
          
          /* Display today text */
          it.print(105, 215, id(font_date), id(white), "Kommende aftaler:");

          /* Display upcoming calendar events */
          std::string event_string = id(cal_events).state;
          it.print(105, 235, id(font_date), id(white), ExtractEvent(event_string, 0).c_str());
          it.print(105, 255, id(font_date), id(white), ExtractEvent(event_string, 1).c_str());
          it.print(105, 275, id(font_date), id(white), ExtractEvent(event_string, 2).c_str());

          //it.print(105, 235, id(font_date), id(white), id(event1));
          //it.print(105, 255, id(font_date), id(white), id(event2));
          //it.print(105, 275, id(font_date), id(white), id(event3));

          /* Print days as headers */
          for(i = 1; i <= 7; i++) {
            it.print(x_offset_next, y_header_start, id(font_small_arial), dayMapInt[i].c_str());
            it.get_text_bounds(x_offset_next, y_header_start, dayMapInt[i].c_str(), id(font_small_arial), TextAlign::TOP_LEFT, &x_start[i], &y_start[i], &width[i], &height[i]);

            x_offset_next += x_offset;
          }

          y_offset = y_header_start + height[1] + 2;
          it.line((x_header_start - (x_offset / 2)), y_offset, (x_start[7] + width[7] + (x_offset / 2)), y_offset);

          /* Find offset for the first day of the month */
          int firstDay = atoi(ExtractDateTime(month_data, 5).c_str());
          int lastDate = atoi(ExtractDateTime(month_data, 4).c_str());

          firstDayOffset = 0;
          for(i = 2; i <= firstDay; i++) {
            firstDayOffset += x_offset;
          }
          
          weekDay = firstDay;
          x_offset_next = x_header_start + firstDayOffset;
          
          y_offset = y_header_start + height[1] + y_start_offset;
          
          int X, tmpX, tmpY, dWidth, dHeight;
          
          for(i = 1; i <= lastDate; i++) {
            it.get_text_bounds(x_offset_next, y_header_start, std::to_string(i).c_str(), id(font_date), TextAlign::TOP_LEFT, &tmpX, &tmpY, &dWidth, &dHeight);

            X = x_offset_next + ((width[weekDay]/2) - (dWidth/2));
            
            if (i == atoi(ExtractDateTime(month_data, 2).c_str())) {
              it.filled_rectangle(x_offset_next-5, y_offset-10, width[weekDay]+10, y_start_offset+10);
              it.print(X, y_offset, id(font_date), id(white), std::to_string(i).c_str());
            } else {
              it.print(X, y_offset, id(font_date), std::to_string(i).c_str());
            }
            if (weekDay == 7) {
              y_offset += y_start_offset+10;
              x_offset_next = x_header_start;
              weekDay = 1;
            } else {
              x_offset_next += x_offset;
              weekDay++;
            }
          }
      - id: weather
        lambda: |-
          /* Defines */
          std::string weather_today = id(current_condition).state;
          std::string forecast = id(forecast_data).state;
          
          int x_header_start = 115;
          int x_start_offset = 40;
          
          int y_header_start = 20;
          int y_start_offset = 20;
          
          int x_offset = x_start_offset;
          int x_offset_next = x_header_start;
          
          int y_offset = y_start_offset;
          
          int i, firstDayOffset, weekDay;
          
          int x_start[8], y_start[8];
          int width[8], height[8];

          char delimm = ';';

          /* Display template */
          std::string month_data = id(month_info).state;
          it.filled_rectangle(0, 210, 400, 100);
          it.print(10, 5, id(font_datetime), ExtractDateTime(month_data, 6).c_str());
          it.print(10, 55, id(font_datetime), ExtractDateTime(month_data, 7).c_str());
          it.print(10, 215, id(font_datetime), id(white), ExtractDateTime(month_data, 2).c_str());
          it.print(3, 265, id(font_month), id(white), ExtractDateTime(month_data, 1).c_str());
          it.filled_rectangle(93, 0, 5, 210);
          it.filled_rectangle(93, 210, 5, 100, id(white));

          /* Display current condition aligned left */
          std::size_t currentWeatherToday, previousWeatherToday = 0;
          currentWeatherToday = weather_today.find(delimm);

          /* Loop todays weather string */
          for (int i=0; i<5; i++){
            if (i == 0) {
              // Current condition icon
              it.print(10, 100, id(icon_weather_large), conditionMap[weather_today.substr(previousWeatherToday, currentWeatherToday - previousWeatherToday)].c_str());
            } else if (i == 1) {
              // Current outside temperature
              it.printf(10, 175, id(font_week), "%sÂ°c", weather_today.substr(previousWeatherToday, currentWeatherToday - previousWeatherToday).c_str());
            } else if (i == 2) {
              // Current outside humidity and pressure
              std::string hum = weather_today.substr(previousWeatherToday, currentWeatherToday - previousWeatherToday);
              previousWeatherToday = currentWeatherToday + 1;
              currentWeatherToday = weather_today.find(delimm, previousWeatherToday);
              std::string pressure = weather_today.substr(previousWeatherToday, currentWeatherToday - previousWeatherToday);

              it.printf(105, 235, id(font_date), id(white), "Rel.fugtighed: %s%%   Tryk: %smbar", hum.c_str(), pressure.c_str());
            } else if (i == 3) {
              // Rain today and rain last hour
              std::string rain = weather_today.substr(previousWeatherToday, currentWeatherToday - previousWeatherToday);
              previousWeatherToday = currentWeatherToday + 1;
              currentWeatherToday = weather_today.find(delimm, previousWeatherToday);
              std::string rain_hour = weather_today.substr(previousWeatherToday, currentWeatherToday - previousWeatherToday);

              // Rain
              it.print(105, 255, id(icon_weather_small), id(white), "\U000F0596");
              it.printf(125, 255, id(font_date), id(white), "%smm", rain.c_str());

              //it.printf(105, 255, id(font_date), id(white), "Regn: %smm / %smm", rain.c_str(), rain_hour.c_str());
            } else if (i == 4) {
              // Wind and gust strength
              std::string wind = weather_today.substr(previousWeatherToday, currentWeatherToday - previousWeatherToday);
              previousWeatherToday = currentWeatherToday + 1;
              currentWeatherToday = weather_today.find(delimm, previousWeatherToday);
              std::string gust = weather_today.substr(previousWeatherToday, currentWeatherToday - previousWeatherToday);

              // Wind
              it.print(105, 275, id(icon_weather_small), id(white), "\U000F059D");
              it.printf(125, 275, id(font_date), id(white), "%sm/s", wind.c_str());

              // Gust
              it.print(205, 275, id(icon_weather_small), id(white), "\U000F059E");
              it.printf(225, 275, id(font_date), id(white), "%sm/s", gust.c_str());
            }
            previousWeatherToday = currentWeatherToday + 1;
            currentWeatherToday = weather_today.find(delimm, previousWeatherToday);
          }      

          /* Display today text */
          it.print(105, 215, id(font_date), id(white), "Vejret lige nu:");

          int limits[3];
          limits[0] = 200;
          limits[1] = 300;
          limits[2] = 400;
          
          /* Draw forecast seperations */
          it.line(limits[0], 0, limits[0], 210);
          it.line(limits[1], 0, limits[1], 210);
          
          /* Display forecast info */
          char forDelim = '#';
          std::size_t currentForecast, previousForecast = 0;
          currentForecast = forecast.find(forDelim);

          /* Loop forecast string */
          for (int i=0; i<3; i++){
            /* Display forecast info */
            std::size_t currentInfo, previousInfo = 0;
            currentInfo = forecast.find(delimm);
            std::string info = forecast.substr(previousInfo, currentInfo - previousInfo);

            int tmpX, tmpY, dWidth, dHeight;

            ESP_LOGD("infopanel", "String %s", info.c_str());
            ESP_LOGD("infopanel", "i %i", i);
            ESP_LOGD("infopanel", "currentInfo %s", currentInfo);
            ESP_LOGD("infopanel", "previousInfo %s", previousInfo);

            /* Loop forecast data */
            for (int x=0; x<6; x++){
              // info.substr(previousWeatherToday, currentWeatherToday - previousWeatherToday)
              if (x == 0) {
                // Day of week
                
                it.get_text_bounds(0, 0, dayMapWeather[info.substr(previousWeatherToday, currentWeatherToday - previousWeatherToday)].c_str(), id(font_month), TextAlign::TOP_LEFT, &tmpX, &tmpY, &dWidth, &dHeight);
                it.print((limits[i]-50-(dWidth/2)), 5, id(font_month), dayMapWeather[info.substr(previousWeatherToday, currentWeatherToday - previousWeatherToday)].c_str());
              } else if (x == 1) {
                // Condition icon
                // conditionMap[info.substr(previousWeatherToday, currentWeatherToday - previousWeatherToday)].c_str()
              } else if (x == 2) {
                // Temperature high and low (+1)
              } else if (x == 3) {
                // Precipitation
              } else if (x == 4) {
                // Wind speed
              } else if (x == 5) {
                // Wind bearing
              }
              previousInfo = currentInfo + 1;
              currentInfo = info.find(delimm, previousInfo);
            }
          
            previousForecast = currentForecast + 1;
            currentForecast = forecast.find(forDelim, previousForecast);
          }
color:
  - id: white
    white: 0%
  - id: black
    white: 100%

debug:
  update_interval: 5s

button:
  - platform: template
    name: Show Calendar
    on_press:
      then:
        - logger.log: "Showing calender page"
        - display.page.show: calendar
        - component.update: screen
  - platform: template
    name: Show Weather
    on_press:
      then:
        - logger.log: "Showing weather page"
        - display.page.show: weather
        - component.update: screen

sensor:
  - platform: debug
    free:
      name: "Heap Free"
    fragmentation:
      name: "Heap Fragmentation"
    block:
      name: "Heap Max Block"
    loop_time:
      name: "Loop Time"

text_sensor:
  - platform: homeassistant
    id: month_info
    entity_id: sensor.infopanel_date_and_time
  - platform: homeassistant
    id: cal_events
    entity_id: sensor.infopanel_calendar_events
  - platform: homeassistant
    id: current_condition
    entity_id: sensor.infopanel_weather_current_conditions
  - platform: homeassistant
    id: forecast_data
    entity_id: sensor.infopanel_weather_forecast
    
font:
  - file: "fonts/Arial-Black-Bold.ttf"
    id: font_datetime
    size: 50
    glyphs: "0123456789"
  - file: "fonts/Arial-Black-Bold.ttf"
    id: font_month
    size: 40
  - file: "fonts/Arial-Black-Bold.ttf"
    id: font_week
    size: 25
    glyphs: "Â°.cUge0123456789"
  - file: "fonts/Arial-Bold.ttf"
    id: font_date
    size: 15
    glyphs: "()/+,.-%Â°&:0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÃÃÃÃ abcdefghijklmnopqrstuvwxyzÃ¦Ã¸Ã¥Ã¶"
  - file: "fonts/Arial.ttf"
    id: font_small_arial
    size: 15
    glyphs: "()/+,-&:0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÃÃÃÃ abcdefghijklmnopqrstuvwxyzÃ¦Ã¸Ã¥Ã¶"
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icon_states
    size: 150
    glyphs:
      - "\U000F16C4" # Boot
      - "\U000F1792" # Update
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icon_weather_small
    size: 15
    glyphs:
      - "\U000F0596" # Pouring
      - "\U000F059D" # Windy
      - "\U000F059E" # Windy Variant
      - "\U000F0E03" # Temp high
      - "\U000F0E02" # Temp low
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icon_weather_large
    size: 70
    glyphs:
      - "\U000F0599" # Sunny
      - "\U000F0595" # Partly Cloudy
      - "\U000F0590" # Cloudy
      - "\U000F0594" # Clear Night
      - "\U000F0597" # Rainy
      - "\U000F0591" # Fog
      - "\U000F0592" # Hail
      - "\U000F0593" # Lightning
      - "\U000F067E" # Lightning Raining
      - "\U000F0596" # Pouring
      - "\U000F067F" # Snowy Rainy
      - "\U000F059D" # Windy
      - "\U000F059E" # Windy Variant