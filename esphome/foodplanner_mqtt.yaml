substitutions:
  node_name: foodplanner
  device_verbose_name: "Foodplanner"
  board: nodemcuv2
  platform: ESP8266
  log_level: DEBUG

packages:
  wifi: !include common/wifi.yaml
  device_base: !include common/device_base.yaml

esphome:
  on_boot:
    then:
      - wait_until:
          time.has_time:
      - delay: 5s
      - lambda: 'id(loaded).publish_state(true);'
      - component.update: foodplan

mqtt:
  broker: 10.254.254.9
  username: esphome
  password: 4XBtGcwt3YX5H
  topic_prefix: esphome/foodplanner
  discovery: false
  birth_message:
    topic: esphome/foodplanner/LWT
    payload: online
  will_message:
    topic: esphome/foodplanner/LWT
    payload: offline
  on_message:
      - topic: esphome/foodplanner/stayawake
        payload: 'ON'
        then:
          - logger.log: "Not allowing sleep"
          - globals.set:
              value: '1'
              id: stayawake
          - component.update: foodplan
          - deep_sleep.prevent: sleeper
      - topic: esphome/foodplanner/stayawake
        payload: 'OFF'
        then:
          - logger.log: "Going to sleep"
          - globals.set:
              value: '0'
              id: stayawake
          - wait_until:
              binary_sensor.is_on: loaded
          - component.update: foodplan
          - deep_sleep.enter: sleeper
  on_json_message:
      - topic: esphome/foodplanner/plan
        then:
          - text_sensor.template.publish:
              id: monday
              state: !lambda 'return x["monday"];'
          - text_sensor.template.publish:
              id: tuesday
              state: !lambda 'return x["tuesday"];'
          - text_sensor.template.publish:
              id: wednesday
              state: !lambda 'return x["wednesday"];'
          - text_sensor.template.publish:
              id: thursday
              state: !lambda 'return x["thursday"];'
          - text_sensor.template.publish:
              id: friday
              state: !lambda 'return x["friday"];'
          - text_sensor.template.publish:
              id: saturday
              state: !lambda 'return x["saturday"];'
          - text_sensor.template.publish:
              id: sunday
              state: !lambda 'return x["sunday"];'
          - if:
              condition:
                binary_sensor.is_on: loaded
              then:
                - component.update: foodplan

deep_sleep:
  id: sleeper
  sleep_duration: 6h
  run_duration: 3min
  
globals:
  - id: stayawake
    type: float
    restore_value: yes
    initial_value: '0'
  - id: rssi
    type: float
    restore_value: no
    initial_value: '0'

binary_sensor:
  - platform: template
    lambda: 'return {};'
    id: loaded
    internal: false

spi:
  clk_pin: D5
  mosi_pin: D7

display:
  - platform: waveshare_epaper
    id: foodplan
    cs_pin: 15
    dc_pin: 4
    busy_pin: 16
    reset_pin: 5
    model: 4.20in
    update_interval: never
    lambda: |-
      /* Get current time */
      auto time = id(time_now).now();
      static const char* TAG = "FoodPlanner";

      float fVoltageMatrix[13][2] = {
        {2.72, 110},
        {2.65, 100},
        {2.6, 90},
        {2.5, 80},
        {2.4, 70},
        {2.3, 60},
        {2.2, 50},
        {2.1, 40},
        {2.0, 30},
        {1.9, 20},
        {1.8, 10},
        {1.7, 0},
        {0, -1}
      };
      
      int i, perc;

      perc = 101;
      float batt;
      batt = id(battery_level).state;

      for(i=12; i>=0; i--) {
        ESP_LOGD(TAG, "%.2f >= %.2f", fVoltageMatrix[i][0], batt);

        if(fVoltageMatrix[i][0] >= batt) {
          perc = fVoltageMatrix[i + 1][1];
          ESP_LOGD(TAG, "i = %d", i);
          ESP_LOGD(TAG, "Break value = %.2f", fVoltageMatrix[i + 1][0]);
          break;
        } 
      }
      
      ESP_LOGD(TAG, "Battery voltage is %.2f", batt);
      ESP_LOGD(TAG, "Battery percentage is %d", perc);

      id(battery).publish_state(perc);

      //Battery
      if (perc == 0) {
        it.print(380, 285, id(font_icon), "\U000F008E");
      } else if (perc == 10) {
        it.print(380, 285, id(font_icon), "\U000F007A");
      } else if (perc == 20) {
        it.print(380, 285, id(font_icon), "\U000F007B");
      } else if (perc == 30) {
        it.print(380, 285, id(font_icon), "\U000F007C");
      } else if (perc == 40) {
        it.print(380, 285, id(font_icon), "\U000F007D");
      } else if (perc == 50) {
        it.print(380, 285, id(font_icon), "\U000F007E");
      } else if (perc == 60) {
        it.print(380, 285, id(font_icon), "\U000F007F");
      } else if (perc == 70) {
        it.print(380, 285, id(font_icon), "\U000F0080");
      } else if (perc == 80) {
        it.print(380, 285, id(font_icon), "\U000F0081");
      } else if (perc == 90) {
        it.print(380, 285, id(font_icon), "\U000F0082");
      } else if (perc == 100) {
        it.print(380, 285, id(font_icon), "\U000F0079");
      } else {
        it.print(380, 285, id(font_icon), "\U000F125D");
      }      

      // Print days
      it.line(0, 40, 400, 40);
      if (time.day_of_week == 2) {
        it.filled_rectangle(0, 0, 400, 40);
        it.print(0, 0, id(font_day), active, "Mandag:");
        it.print(130, 10, id(font_food), active, id(monday).state.c_str()); // Mandag
      } else {
        it.print(0, 0, id(font_day), "Mandag:");
        it.print(130, 10, id(font_food), id(monday).state.c_str()); // Mandag
      }        
      it.line(0, 80, 400, 80);
      if (time.day_of_week == 3) {
        it.filled_rectangle(0, 40, 400, 40);
        it.print(0, 40, id(font_day), active, "Tirsdag:");
        it.print(130, 50, id(font_food), active, id(tuesday).state.c_str()); // Tirsdag
      } else {
        it.print(0, 40, id(font_day), "Tirsdag:");
        it.print(130, 50, id(font_food), id(tuesday).state.c_str()); // Tirsdag
      }        
      it.line(0, 120, 400, 120);
      if (time.day_of_week == 4) {
        it.filled_rectangle(0, 80, 400, 40);
        it.print(0, 80, id(font_day), active, "Onsdag:");
        it.print(130, 90, id(font_food), active, id(wednesday).state.c_str()); // Onsdag
      } else {
        it.print(0, 80, id(font_day), "Onsdag:");
        it.print(130, 90, id(font_food), id(wednesday).state.c_str()); // Onsdag
      }        
      it.line(0, 160, 400, 160);
      if (time.day_of_week == 5) {
        it.filled_rectangle(0, 120, 400, 40);
        it.print(0, 120, id(font_day), active, "Torsdag:");
        it.print(130, 130, id(font_food), active, id(thursday).state.c_str()); // Torsdag
      } else {
        it.print(0, 120, id(font_day), "Torsdag:");
        it.print(130, 130, id(font_food), id(thursday).state.c_str()); // Torsdag
      }
      it.line(0, 200, 400, 200);
      if (time.day_of_week == 6) {
        it.filled_rectangle(0, 160, 400, 40);
        it.print(0, 160, id(font_day), active, "Fredag:");
        it.print(130, 170, id(font_food), active, id(friday).state.c_str()); // Fredag
      } else {
        it.print(0, 160, id(font_day), "Fredag:");
        it.print(130, 170, id(font_food), id(friday).state.c_str()); // Fredag
      }
      it.line(0, 240, 400, 240);
      if (time.day_of_week == 7) {
        it.filled_rectangle(0, 200, 400, 40);
        it.print(0, 200, id(font_day), active, "Lørdag:");
        it.print(130, 210, id(font_food), active, id(saturday).state.c_str()); // Lørdag
      } else {
        it.print(0, 200, id(font_day), "Lørdag:");
        it.print(130, 210, id(font_food), id(saturday).state.c_str()); // Lørdag
      }
      it.line(0, 280, 400, 280);
      if (time.day_of_week == 1) {
        it.filled_rectangle(0, 240, 400, 40);
        it.print(0, 240, id(font_day), active, "Søndag:");
        it.print(130, 250, id(font_food), active, id(sunday).state.c_str()); // Søndag
      } else {
        it.print(0, 240, id(font_day), "Søndag:");
        it.print(130, 250, id(font_food), id(sunday).state.c_str()); // Søndag
      }
      
      // Print state
      if (id(rssi) > -67) { 
        it.print(0, 285, id(font_icon), "\U000F0928"); //Wifi
      } else if ((id(rssi) <= -67) & (id(rssi) > -70)) {
        it.print(0, 285, id(font_icon), "\U000F0925"); //Wifi
      } else if ((id(rssi) <= -70) & (id(rssi) > -80)) {
        it.print(0, 285, id(font_icon), "\U000F0922"); //Wifi
      } else if ((id(rssi) <= -80) & (id(rssi) > -96)) {
        it.print(0, 285, id(font_icon), "\U000F091F"); //Wifi
      } else {
        it.print(0, 285, id(font_icon), "\U000F092F"); //Wifi
      }
      
      it.print(90, 280, id(font_status), "Last update:");
      it.strftime(180, 280, id(font_status), "%H:%M %d-%m-%Y", time);
      if (id(stayawake) == 1) {
        it.print(360, 285, id(font_icon), "\U000F04B3"); //Stay awake
      } else {
        it.print(360, 285, id(font_icon), "\U000F04B2"); //Sleep
      }

color:
  - id: active
    white: 0%
    
sensor:
  - platform: wifi_signal
    id: wifi_sig
    name: wifi_sig
    update_interval: 3600s
    on_value:
      then:
        - globals.set:
            id: rssi
            value: !lambda "return x;"
        - if:
            condition:
              binary_sensor.is_on: loaded
            then:
              - component.update: foodplan
  - platform: adc
    pin: VCC
    id: "battery_level"
    update_interval: 360s
    on_value:
      then:
        - if:
            condition:
              binary_sensor.is_on: loaded
            then:
              - component.update: foodplan
  - platform: template
    lambda: 'return {};'
    name: battery
    id: battery
    internal: false

text_sensor:
  - platform: template
    lambda: 'return {};'
    name: monday
    id: monday
    internal: true
  - platform: template
    lambda: 'return {};'
    name: tuesday
    id: tuesday
    internal: true
  - platform: template
    lambda: 'return {};'
    name: wednesday
    id: wednesday
    internal: true
  - platform: template
    lambda: 'return {};'
    name: thursday
    id: thursday
    internal: true
  - platform: template
    lambda: 'return {};'
    name: friday
    id: friday
    internal: true
  - platform: template
    lambda: 'return {};'
    name: saturday
    id: saturday
    internal: true
  - platform: template
    lambda: 'return {};'
    name: sunday
    id: sunday
    internal: true

time:
  - platform: sntp
    id: time_now

font:
  - file: "fonts/Comic Sans MS.ttf"
    id: font_day
    size: 30
    glyphs: ":MTOFLSandgirsoeø"
  - file: "fonts/Comic Sans MS.ttf"
    id: font_status
    size: 15
  - file: "fonts/Comic Sans MS.ttf"
    id: font_food
    size: 20
    glyphs: "()/+,-&:0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÆØÅÖ abcdefghijklmnopqrstuvwxyzæøåö"
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: font_icon
    size: 18
    glyphs:
      - "\U000F092F" #mdi-wifi-strength-outline
      - "\U000F091F" #mdi-wifi-strength-1
      - "\U000F0922" #mdi-wifi-strength-2
      - "\U000F0925" #mdi-wifi-strength-3
      - "\U000F0928" #mdi-wifi-strength-4
      - "\U000F0079" #mdi-battery
      - "\U000F125D" #mdi-battery-off
      - "\U000F008E" #mdi-battery-outline
      - "\U000F007A" #mdi-battery-10
      - "\U000F007B" #mdi-battery-20
      - "\U000F007C" #mdi-battery-30
      - "\U000F007D" #mdi-battery-40
      - "\U000F007E" #mdi-battery-50
      - "\U000F007F" #mdi-battery-60
      - "\U000F0080" #mdi-battery-70
      - "\U000F0081" #mdi-battery-80
      - "\U000F0082" #mdi-battery-90
      - "\U000F04B2" #mdi-sleep
      - "\U000F04B3" #mdi-sleep-off