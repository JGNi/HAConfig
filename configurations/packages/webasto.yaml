###########################################
#                                         #
#   ! ! ! ONLY FOR ADVANCED USERS ! ! !   #
#   -----------------------------------   #
#                                         #
# Webasto Package for reading state and   #
# controlling on/off thru ParseHub        #
# Please note that this is an UNSUPPORTED #
# solution, and use at your own risk!     #
#                                         #
# REQUIRES Parsehub project Webasto.phj   #
# imported into your Parsehub             #
#                                         #
# Replace t2JPRLvvEm1r with your Project  #
# token (found in Parsehub app)           #
#                                         #
# Create path /config/rest_json           #
#                                         #
# Create path /config/shell_scripts       #
# Copy get_parsehub.sh to this path       #
# chmod 755 get_parsehub.sh               #
#                                         #
# Create file                             #
# /config/shell_scripts/shell_secrets.txt #
# Add these variables to the file:        #
# PARSEHUB_API_TOKEN=TokenFromApp         #
#                                         #
# Rev. 1, 15/11-2021 by Morten Trab       #
# Rev. 2, 21/11-2021 by Morten Trab       #
# Rev. 3, 15/12-2021 by Morten Trab       #
#                                         #
###########################################

automation:
  - alias: Auto - Webasto - Parsehub - Update State
    id: webastoUpdateState
    description: Triggers update thru Parsehub
    trigger:
      - platform: time_pattern
        minutes: /5
    action:
      - service: shell_command.parsehub_run
        data_template:
          token: !secret token_webasto
          command: ""
    mode: single

  - alias: Auto - Webasto - Parsehub - Fetch JSON after run
    id: webastoFetchState
    description: Fetch JSON data after finished run
    trigger:
      - platform: webhook
        webhook_id: !secret webhook_webasto
    condition: []
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: '{{ trigger.data.data_ready == "1" }}'
            sequence:
              - service: shell_command.parsehub_fetch
                data_template:
                  token: !secret token_webasto
                  filename: webasto.json
        default: []
    mode: restart

  - alias: Auto - Webasto - Get next departure time
    id: webastoNextDeparture
    description: Reads next start time from calendar event and deducts travel time
    mode: single
    trigger:
      - platform: state
        entity_id: calendar.heating
        to: "off"
      - platform: time_pattern
        hours: /1
        minutes: 5
    action:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.webasto_next_departure_time
        data:
          datetime: >
            {{ strptime(((as_timestamp(state_attr("calendar.heating","start_time")) - (states('sensor.google_travel_time')|int(0)*60) - (10*60)))|timestamp_local(default='0'), '%Y-%m-%d %H:%M:%S') }}
      - service: input_text.set_value
        target:
          entity_id: input_text.google_destination
        data:
          value: >
            {% if state_attr("calendar.heating", "location") != "" %}
              {{ state_attr("calendar.heating", "location") }}
            {% else %}
              home
            {% endif %}

  - alias: Auto - Webasto - Set next calculated start
    id: webastoCalculatedStart
    description: Reads the calculated departure time from sensor.webasto_calculated_start
    mode: single
    trigger:
      - platform: state
        entity_id: sensor.webasto_calculated_start
        to:
    action:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.webasto_calculated_departure_time
        data:
          datetime: >
            {% if (states('sensor.calculated_run_time') | float(0)) > 0 %}
              {{ states("sensor.webasto_calculated_start") }}
            {% else %}
              {{ states("input_datetime.webasto_next_departure_time") }}
            {% endif %}

  - alias: Auto - Webasto - Parsehub - Turn on at calculated start time
    id: webastoTurnOnAtCalcStart
    description: "Turns on the heater when input_datetime.webasto_calculated_departure_time is reached"
    trigger:
      - platform: time
        at: input_datetime.webasto_calculated_departure_time
    condition:
      - condition: and
        conditions:
          - condition: template
            value_template: >-
              {{ states('sensor.webasto_temperature') <
              states('input_number.webasto_low_point') }}
          - condition: state
            entity_id: switch.webasto
            state: "off"
    action:
      - service: shell_command.parsehub_run
        data_template:
          token: !secret token_webasto
          command: 'on'
    mode: single

rest:
  - resource: https://home.trab.dk/local/rest/webasto.json
    sensor:
      - name: Webasto Battery
        value_template: >
          {% if 'voltage' in value_json %}
            {{ value_json.voltage }}
          {% else %}
            {{ states("sensor.webasto_battery") }}
          {% endif %}
        unit_of_measurement: "V"

      - name: Webasto Temperature
        value_template: >
          {% if 'temperature' in value_json %}
            {{ value_json.temperature }}
          {% else %}
            {{ states("sensor.webasto_temperature") }}
          {% endif %}
        unit_of_measurement: "°C"

      - name: Webasto State
        value_template: >
          {% if 'state' in value_json and value.state != "unknown" %}
            {{ value_json.state }}
          {% else %}
            {{ states("sensor.webasto_state") }}
          {% endif %}

      - name: Webasto Runtime Left
        unit_of_measurement: "min"
        value_template: >
          {% if 'timeleft' in value_json %}
            {% if ":" in value_json.timeleft %}
              {% set split = value_json.timeleft.split(":") %}
                {{ (split[0] | int * 60) + (split[1] | int) }}
            {% else %}
              {{ value_json.timeleft }}
            {% endif %}
          {% else %}
            0
          {% endif %}

      - name: Webasto Last Update
        value_template: >-
          {% if 'last_update' in value_json %}
            {{ strptime(value_json.last_update.replace(' GMT',''), '%a %b %d %Y %H:%M:%S%z (%Z)').timestamp() | timestamp_custom('%H:%M %d-%m-%Y', default='0') }}
          {% else %}
            {{ states("sensor.webasto_last_update") }}
          {% endif %}

template:
  - sensor:
    - name: "Webasto Calculated Start"
      state: >
        {%- if now().strftime("%H:%M:00") > states("input_datetime.car_departure_time") %}
          {%- set checkTime = (now() + timedelta(days=1)).strftime("%Y-%m-%d") + " " + states("input_datetime.car_departure_time") %}
        {%- else %}
          {%- set checkTime =  now().strftime("%Y-%m-%d") + " " + states("input_datetime.car_departure_time") %}
        {%- endif %}
        {% set startManual = strptime(((as_timestamp(checkTime, 0) - (states('sensor.calculated_run_time')|int(0)*60) - (10*60)))|timestamp_custom(false), '%Y-%m-%d %H:%M:%S') %}
        {% set startAuto = strptime(((as_timestamp(state_attr("calendar.heating","start_time") | timestamp_custom(false), 0) - (states('sensor.google_travel_time')|int(0)*60) - (states('sensor.calculated_run_time')|int(0)*60) - (10*60)))|timestamp_custom(default='0'), '%Y-%m-%d %H:%M:%S') %}
        {% if states("input_boolean.charge_time_override") == "on" %}
          {% if checkTime < state_attr("calendar.heating","start_time") %}
            {{ startManual }}
          {% else %}
            {{ startAuto }}
          {% endif %}
        {% else %}
          {{ startAuto }}
        {% endif %}

  - sensor:
    - name: "Next Scheduled Appointment"
      state: '{{ state_attr("calendar.heating","start_time") }}'

  - sensor:
    - name: "Calculated run time"
      unit_of_measurement: min
      state: >
        {% if (states('sensor.webasto_temperature') | float(0)) < (states('input_number.webasto_low_point') | float(0)) %}
          {% set diff = (states('input_number.webasto_low_point') | float(0)) - (states('sensor.webasto_temperature') | float(0)) %}
          {% set runTime = 0.05 * diff | round(1) %}
          {% if runTime < 0.15 %}
            {% set runTime = 0.05 * diff | round(1) %}
          {% endif %}
          {{ ((60 * runTime) | int) }}
        {%else%}
          0
        {%endif%}

homeassistant:
  customize:
    sensor.webasto_battery:
      icon: mdi:car-battery

    sensor.webasto_temperature:
      icon: mdi:thermometer

    sensor.webasto_state:
      icon: mdi:state-machine

switch:
  - platform: template
    switches:
      webasto:
        friendly_name: Webasto
        value_template: "{{ is_state('sensor.webasto_state', 'on') }}"
        icon_template: >-
          {% if is_state('sensor.webasto_state', 'on') %}
            mdi:radiator
          {% else %}
            mdi:radiator-disabled
          {% endif %}
        turn_on:
          service: shell_command.parsehub_run
          data_template:
            token: !secret token_webasto
            command: 'on'
        turn_off:
          service: shell_command.parsehub_run
          data_template:
            token: !secret token_webasto
            command: 'off'

input_datetime:
  webasto_calculated_departure_time:
    name: Webasto Calculated Departure Time
    icon: mdi:send-clock
    has_date: true
    has_time: true

  webasto_next_departure_time:
    name: Webasto Next Departure Time
    icon: mdi:clock-start
    has_date: true
    has_time: true

input_number:
  webasto_low_point:
    name: Webasto Low Point
    icon: mdi:thermometer-low
    unit_of_measurement: "°C"
    min: 0
    max: 30
    step: 1

  webasto_low_battery:
    name: Webasto Low Point
    icon: mdi:thermometer-low
    unit_of_measurement: V
    min: 10
    max: 15
    step: 0.1
