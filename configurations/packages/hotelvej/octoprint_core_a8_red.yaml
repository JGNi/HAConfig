##################################
# Custom API calls for OctoPrint #
#                                #
# Recreate this as a "NextGen"   #
# custom_component?! To-Do!      #
##################################

pack_octoprint_core_a8_red:
  template:
    - binary_sensor:
        - name: "Core A8 Red Idle"
          state: >
            {% set idle = 'on' %}
            {% if is_state("binary_sensor.core_a8_red_printing", "on") %}
              {% set idle = 'off' %}
            {% endif %}
            {% if is_state("switch.core_a8_red_power", "off") %}
              {% set idle = 'off' %}
            {% endif %}
            {% if is_state("switch.core_a8_red_mains", "off") %}
              {% set idle = 'off' %}
            {% endif %}
            {{ idle }}
        - name: "Core A8 Red Min Temp"
          state: >
            {% set min = 190 %}
            {% if (states("sensor.core_a8_red_tool_0_temperature") | float(0)) > min and is_state("binary_sensor.core_a8_red_idle", "on") %}
              on
            {% else %}
              off
            {% endif %}

  switch:
    - platform: template
      switches:
        core_a8_red_power:
          friendly_name: Core A8 Red Power
          value_template: >-
            {% if is_state('sensor.core_a8_red_print_status', 'Offline after error') or is_state('sensor.core_a8_red_print_status', 'Offline') or is_state('sensor.core_a8_red_print_status', 'unavailable')%}
              off
            {% else %}
              on
            {% endif %}
          turn_on:
            service: rest_command.core_a8_red_turn_on
          turn_off:
            service: rest_command.core_a8_red_turn_off

  input_text:
    core_a8_red_custom_command:
      name: GCode
      initial: ""

  input_boolean:
    core_a8_red_file_origin_local:
      name: Local
      icon: mdi:folder

    core_a8_red_file_origin_sd:
      name: SD
      icon: mdi:sd

  input_number:
    core_a8_red_nozzle_temp:
      name: Core A8 Red Nozzle Temp
      min: 0
      max: 400
      step: 1
      mode: box
      icon: mdi:printer-3d-nozzle-outline
      unit_of_measurement: "°C"

    core_a8_red_bed_temp:
      name: Core A8 Red Bed Temp
      min: 0
      max: 100
      step: 1
      mode: box
      icon: mdi:thermometer
      unit_of_measurement: "°C"

    core_a8_red_flow:
      name: Core A8 Red Flow Rate
      min: 50
      max: 150
      step: 1
      initial: 100
      icon: mdi:printer-3d-nozzle
      unit_of_measurement: "%"

    core_a8_red_fan_speed:
      name: Core A8 Red Fan Speed
      min: 0
      max: 100
      step: 1
      initial: 0
      icon: mdi:fan
      unit_of_measurement: "%"

    core_a8_red_feedrate:
      name: Core A8 Red Feed Rate
      min: 50
      max: 300
      step: 1
      initial: 100
      icon: mdi:fast-forward-outline
      unit_of_measurement: "%"

  input_select:
    core_a8_red_file_selector:
      name: Core A8 Red Filer
      options:
        - Ingen
      initial: Ingen
      icon: mdi:folder-open

  automation:
    - alias: "Auto - Core A8 Red - Read Nozzle Temperature"
      id: coreA8RedSetNozzleTemp
      trigger:
        platform: state
        entity_id: sensor.core_a8_red_tool_0_target
      action:
        service: input_number.set_value
        target:
          entity_id: input_number.core_a8_red_nozzle_temp
        data:
          value: >
            {% if states('sensor.core_a8_red_tool_0_target') != "unavailable" %}
              {{ states("sensor.core_a8_red_tool_0_target") }}
            {% else %}
              0
            {% endif %}

    - alias: "Auto - Core A8 Red - Read Bed Temperature"
      id: coreA8RedSetBedTemp
      trigger:
        platform: state
        entity_id: sensor.core_a8_red_bed_target
      action:
        service: input_number.set_value
        target:
          entity_id: input_number.core_a8_red_bed_temp
        data:
          value: >
            {% if states('sensor.core_a8_red_bed_target') != "unavailable" %}
              {{ states("sensor.core_a8_red_bed_target") }}
            {% else %}
              0
            {% endif %}

    - alias: "Auto - Core A8 Red - Radio Button Functionality - Origin"
      trigger:
        - platform: state
          entity_id: input_boolean.core_a8_red_file_origin_local
          to: "on"
          id: "local"
        - platform: state
          entity_id: input_boolean.core_a8_red_file_origin_sd
          to: "on"
          id: "sd"
        - platform: homeassistant
          event: start
          id: "local"
        - platform: state
          entity_id: sensor.core_a8_red_print_status
          from: "unavailable"
          id: "local"
      action:
        - choose:
            - conditions:
                - condition: trigger
                  id: local
              sequence:
                - service: input_boolean.turn_off
                  target:
                    entity_id: input_boolean.core_a8_red_file_origin_sd
                - service: pyscript.octoprint_get_files
                  data:
                    entity_id: input_select.core_a8_red_file_selector
                    url: !secret octoprint_core_a8_red_api_files_command
                    key: !secret octoprint_core_a8_red_api_key
                    origin: local
        - choose:
            - conditions:
                - condition: trigger
                  id: sd
              sequence:
                - service: input_boolean.turn_off
                  target:
                    entity_id: input_boolean.core_a8_red_file_origin_local
                - service: pyscript.octoprint_get_files
                  data:
                    entity_id: input_select.core_a8_red_file_selector
                    url: !secret octoprint_core_a8_red_api_files_command
                    key: !secret octoprint_core_a8_red_api_key
                    origin: sdcard
      mode: restart

    - alias: "Auto - Core A8 Red - Send Custom GCode"
      id: coreA8RedSendCustomGCode
      trigger:
        - platform: state
          entity_id: input_text.core_a8_red_custom_command
      action:
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8_red/hassControl/commands
            payload_template: '{{ states("input_text.core_a8_red_custom_command") }}'
        - service: input_text.set_value
          target:
            entity_id: input_text.core_a8_red_custom_command
          data:
            value: ""
      mode: queued

    - alias: "Auto - Core A8 Red - Set Flow Rate"
      id: coreA8RedSetFlowRate
      trigger:
        - platform: state
          entity_id: input_number.core_a8_red_flow
      action:
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8_red/hassControl/commands
            payload_template: 'M221 S{{ states("input_number.core_a8_red_flow") }}'
      mode: single

    - alias: "Auto - Core A8 Red - Set Fan Speed"
      id: coreA8RedSetFanSpeed
      trigger:
        - platform: state
          entity_id: input_number.core_a8_red_fan_speed
      action:
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8_red/hassControl/commands
            payload_template: 'M106 S{{ 255 * ((states("input_number.core_a8_red_fan_speed") | int(0)) / 100) }}'
      mode: single

    - alias: "Auto - Core A8 Red - Set Feed Rate"
      id: coreA8RedSetFeedRate
      trigger:
        - platform: state
          entity_id: input_number.core_a8_red_feedrate
      action:
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8_red/hassControl/commands
            payload_template: 'M220 S{{ states("input_number.core_a8_red_feedrate") }}'
      mode: single

    - alias: "Auto - Core A8 Red - Set Flow Rate on power on"
      id: coreA8RedSetFeedRate
      trigger:
        - platform: state
          entity_id: binary_sensor.core_a8_red_connected
          to: "on"
      action:
        - service: input_number.set_value
          data:
            entity_id: input_number.core_a8_red_flow
            value: 100
      mode: single

  script:
    # Preheat PLA
    3dp_core_a8_red_preheat_pla:
      alias: 3DP - Core A8 Red - Preheat PLA
      sequence:
        # Set non-blocking bed temp
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8_red/hassControl/commands
            payload: "M140 S60"
        # Set non-blocking nozzle temp
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8_red/hassControl/commands
            payload: "M104 S210"
    # Preheat PETG
    3dp_core_a8_red_preheat_petg:
      alias: 3DP - Core A8 Red - Preheat PETG
      sequence:
        # Set non-blocking bed temp
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8_red/hassControl/commands
            payload: "M140 S70"
        # Set non-blocking nozzle temp
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8_red/hassControl/commands
            payload: "M104 S230"
    # Relevel bed by script
    3dp_core_a8_red_relevel_bed:
      alias: 3DP - Core A8 Red - Relevel Bed
      sequence:
        # Home all axes
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8_red/hassControl/commands
            payload: "G28"
        # Set Z to 300 (over max Z to ensure leveling sideways)
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8_red/hassControl/commands
            payload: "G1 Z300 F1000"

    #Safe shutdown script
    3dp_core_a8_red_safe_shutdown:
      sequence:
        - service: switch.turn_on
          target:
            entity_id: switch.core_a8_red_shutdown_system
        - wait_template:
            "{{ is_state('sensor.core_a8_red_print_status', 'unavailable')
            }}"
        - delay:
            hours: 0
            minutes: 1 # PLEASE MAKE SURE YOUR PI REACHES POWER OFF STATE BEFORE THIS DELAY ENDS!
            seconds: 0
            milliseconds: 0
        - service: switch.turn_off
          target:
            entity_id: switch.core_a8_red_mains
      mode: single
      alias: 3DP - Core A8 Red - Safe Shutdown
      icon: mdi:power-cycle

    # Power up after safe shutdown
    3dp_core_a8_red_power_up:
      alias: 3DP - Core A8 Red - Power Up
      sequence:
        - service: switch.turn_on
          target:
            entity_id: switch.core_a8_red_mains
        - wait_template:
            "{{ is_state('sensor.core_a8_red_print_status', 'unavailable')
            == false }}"
        - service: switch.turn_on
          target:
            entity_id: switch.core_a8_red_power
      mode: single
      icon: mdi:power

  rest_command:
    core_a8_red_turn_on:
      url: !secret octoprint_core_a8_red_api_power_on

    core_a8_red_turn_off:
      url: !secret octoprint_core_a8_red_api_power_off

  var:
    core_a8_red_terminal:
      friendly_name: "Core A8 Red Terminal"
      icon: mdi:text-box
