pack_octoprint_core_a8:
  template:
    - binary_sensor:
        - name: "Core A8 Idle"
          state: >
            {% set idle = 'on' %}
            {% if is_state("binary_sensor.core_a8_printing", "on") %}
              {% set idle = 'off' %}
            {% endif %}
            {% if is_state("switch.core_a8_power", "off") %}
              {% set idle = 'off' %}
            {% endif %}
            {% if is_state("switch.core_a8_mains", "off") %}
              {% set idle = 'off' %}
            {% endif %}
            {{ idle }}

  input_text:
    core_a8_custom_command:
      name: GCode
      initial: ""

  input_boolean:
    core_a8_file_origin_local:
      name: Local
      icon: mdi:folder

    core_a8_file_origin_sd:
      name: SD
      icon: mdi:sd

  input_number:
    core_a8_nozzle_temp:
      name: Core A8 Nozzle Temp
      min: 0
      max: 400
      step: 1
      mode: box
      icon: mdi:printer-3d-nozzle-outline
      unit_of_measurement: "°C"

    core_a8_bed_temp:
      name: Core A8 Bed Temp
      min: 0
      max: 100
      step: 1
      mode: box
      icon: mdi:thermometer
      unit_of_measurement: "°C"

    core_a8_flow:
      name: Core A8 Flow Rate
      min: 50
      max: 150
      step: 1
      initial: 100
      icon: mdi:printer-3d-nozzle
      unit_of_measurement: "%"

    core_a8_feedrate:
      name: Core A8 Feed Rate
      min: 50
      max: 300
      step: 1
      initial: 100
      icon: mdi:fast-forward-outline
      unit_of_measurement: "%"

  input_select:
    core_a8_file_selector:
      name: Core A8 Filer
      options:
        - Ingen
      initial: Ingen
      icon: mdi:folder-open

  automation:
    - alias: "Auto - Core A8 - Read Nozzle Temperature"
      id: coreA8SetNozzleTemp
      trigger:
        platform: state
        entity_id: sensor.core_a8_tool_0_target
      action:
        service: input_number.set_value
        target:
          entity_id: input_number.core_a8_nozzle_temp
        data:
          value: >
            {% if states('sensor.core_a8_tool_0_target') != "unavailable" %}
              {{ states("sensor.core_a8_tool_0_target") }}
            {% else %}
              0
            {% endif %}

    - alias: "Auto - Core A8 - Read Bed Temperature"
      id: coreA8SetBedTemp
      trigger:
        platform: state
        entity_id: sensor.core_a8_bed_target
      action:
        service: input_number.set_value
        target:
          entity_id: input_number.core_a8_bed_temp
        data:
          value: >
            {% if states('sensor.core_a8_bed_target') != "unavailable" %}
              {{ states("sensor.core_a8_bed_target") }}
            {% else %}
              0
            {% endif %}

    - alias: "Auto - Core A8 - Radio Button Functionality - Origin"
      trigger:
        - platform: state
          entity_id: input_boolean.core_a8_file_origin_local
          to: 'on'
          id: 'local'
        - platform: state
          entity_id: input_boolean.core_a8_file_origin_sd
          to: 'on'
          id: 'sd'
        - platform: homeassistant
          event: start
          id: 'local'
        - platform: state
          entity_id: sensor.core_a8_print_status
          from: 'unavailable'
          id: 'local'
      action:
        - choose:
            - conditions:
                - condition: trigger
                  id: local
              sequence:
                - service: input_boolean.turn_off
                  target:
                    entity_id: input_boolean.core_a8_file_origin_sd
                - service: pyscript.octoprint_get_files
                  data:
                    entity_id: input_select.core_a8_file_selector
                    url: !secret octoprint_core_a8_api_files_command
                    key: !secret octoprint_core_a8_api_key
                    origin: local
        - choose:
            - conditions:
                - condition: trigger
                  id: sd
              sequence:
                - service: input_boolean.turn_off
                  target:
                    entity_id: input_boolean.core_a8_file_origin_local
                - service: pyscript.octoprint_get_files
                  data:
                    entity_id: input_select.core_a8_file_selector
                    url: !secret octoprint_core_a8_api_files_command
                    key: !secret octoprint_core_a8_api_key
                    origin: sdcard
      mode: restart

    - alias: "Auto - Core A8 - Send Custom GCode"
      id: coreA8SendCustomGCode
      trigger:
        - platform: state
          entity_id: input_text.core_a8_custom_command
      action:
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload_template: '{{ states("input_text.core_a8_custom_command") }}'
        - service: input_text.set_value
          target:
            entity_id: input_text.core_a8_custom_command
          data:
            value: ""
      mode: queued

    - alias: "Auto - Core A8 - Set Flow Rate"
      id: coreA8SetFlowRate
      trigger:
        - platform: state
          entity_id: input_number.core_a8_flow
      action:
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload_template: 'M221 S{{ states("input_number.core_a8_flow") }}'
      mode: single

    - alias: "Auto - Core A8 - Set Feed Rate"
      id: coreA8SetFeedRate
      trigger:
        - platform: state
          entity_id: input_number.core_a8_feedrate
      action:
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload_template: 'M220 S{{ states("input_number.core_a8_feedrate") }}'
      mode: single

  camera:
    - platform: mjpeg
      name: Core A8
      still_image_url: !secret octoprint_core_a8_still
      mjpeg_url: !secret octoprint_core_a8_stream

  switch:
    - platform: template
      switches:
        core_a8_power:
          friendly_name: Core A8 Power
          value_template: >-
            {% if is_state('sensor.core_a8_print_status', 'Offline after error') or is_state('sensor.core_a8_print_status', 'Offline') or is_state('sensor.core_a8_print_status', 'unavailable')%}
              off
            {% else %}
              on
            {% endif %}
          turn_on:
            service: rest_command.core_a8_turn_on
          turn_off:
            service: rest_command.core_a8_turn_off

  script:
    # Reset UBL script
    3dp_core_a8_ubl:
      alias: 3DP - Core A8 - Reset UBL
      sequence:
        # Set non-blocking bed temp
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "M140 S60"
        # Set non-blocking nozzle temp
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "M104 S210"
        # Do bed relevel while awaiting temperature
        - service: script.turn_on
          data:
            entity_id: script.3dp_core_a8_relevel_bed
        # Set and await nozzle temp
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "M109 S210"
        # Await bed temp
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "M190 S60"
        # Home all axes
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "G28"
        # Start automated probing
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "G29 P1"
        # Fill missing probe points (doing this 2 times as I miss 2 rows on my setup)
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "G29 P3 T"
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "G29 P3 T"
        # Save mesh to EEPROM slot 1
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "G29 S1"
        # Set fade height at 10mm
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "G29 F 10.0"
        # Activate UBL
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "G29 A"
        # Save to EEPROM (Due to some unknown software error I need to run this 3 times)
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "M500"
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "M500"
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "M500"
        # Load mesh slot 1
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "G29 L1"
        # Turn off bed heating
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "M140 S0"
        # Turn off nozzle heating
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "M104 S0"

    # Relevel bed by script
    3dp_core_a8_relevel_bed:
      alias: 3DP - Core A8 - Relevel Bed
      sequence:
        # Home all axes
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "G28"
        # Set Z to 300 (over max Z to ensure leveling sideways)
        - service: mqtt.publish
          data:
            topic: octoprint/core_a8/hassControl/commands
            payload: "G0 Z300"

    #Safe shutdown script
    3dp_core_a8_safe_shutdown:
      sequence:
        - service: switch.turn_on
          target:
            entity_id: switch.core_a8_shutdown_system
        - wait_template:
            "{{ is_state('sensor.core_a8_print_status', 'unavailable')
            }}"
        - delay:
            hours: 0
            minutes: 1 # PLEASE MAKE SURE YOUR PI REACHES POWER OFF STATE BEFORE THIS DELAY ENDS!
            seconds: 0
            milliseconds: 0
        - service: switch.turn_off
          target:
            entity_id: switch.core_a8_mains
      mode: single
      alias: 3DP - Core A8 - Safe Shutdown
      icon: mdi:power-cycle

    # Power up after safe shutdown
    3dp_core_a8_power_up:
      alias: 3DP - Core A8 - Power Up
      sequence:
        - service: switch.turn_on
          target:
            entity_id: switch.core_a8_mains
        - wait_template:
            "{{ is_state('sensor.core_a8_print_status', 'unavailable')
            == false }}"
        - service: switch.turn_on
          target:
            entity_id: switch.core_a8_power
      mode: single
      icon: mdi:power

  rest_command:
    core_a8_turn_on:
      url: !secret octoprint_core_a8_api_power_on

    core_a8_turn_off:
      url: !secret octoprint_core_a8_api_power_off

  var:
    core_a8_terminal:
      friendly_name: "Core A8 Terminal"
      icon: mdi:text-box